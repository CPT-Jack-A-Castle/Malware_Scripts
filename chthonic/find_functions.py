import re
import idaapi

class MyHandler(idaapi.action_handler_t):
	def __init__(self):
		self.funcs = {}
		data = open('modules.txt', 'r').read()
		data =data.split('\n')
		for line in data:
			if line != '':
				temp = re.split('\s+', line)
				self.funcs[int(temp[0],16)] = temp[-1]
		idaapi.action_handler_t.__init__(self)
	def find_nearest_function(self,addr):
		for i in range(10):
			if addr-i in self.funcs.keys():
				return self.funcs[addr-i]
		return None
	
	def activate(self, ctx):
		ea = ScreenEA()
		str_id = idaapi.get_highlighted_identifier()
		if str_id[-1] == 'h':
			addr = int(str_id[:-1], 16)
		elif str_id[-1] == 'o':
			addr = int(str_id[:-1], 8)
		elif str_id[-1] == 'b':
			addr = int(str_id[:-1], 2)
		else:
			addr = int(str_id)
		temp = self.find_nearest_function(addr)
		if temp != None:
			n = GetFunctionName(ea)
			n_addr = int(n[4:],16)
			idaapi.msg(temp)
			idc.MakeName(n_addr, temp)
	
	def update(self, ctx):
		return idaapi.AST_ENABLE_ALWAYS

action_desc = idaapi.action_desc_t('my:action', 'bleh', MyHandler(), 'Ctrl+h', 'bleh', 199)
idaapi.register_action(action_desc)
"""
funcs = {}


data = open('modules.txt', 'r').read()
data =data.split('\n')
for line in data:
	if line != '':
		temp = re.split('\s+', line)
		funcs[int(temp[0],16)] = temp[-1]

def find_nearest_function(addr):
	for i in range(10):
		if addr-i in funcs.keys():
			return funcs[addr-i]
	return None
"""