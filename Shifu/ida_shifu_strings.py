#IDA script for decoding Shifu strings
#Sample: MD5: 40e8b98a5e1f5c13310d065e887febf6
#	SHA256: 59513069a5243d5fbde3beb89132463eec3bfc23d56d66b4b5c9a1d16a6fd506


def decode_string(addr, slen, xor_key):
	out = ""
	for i in range(0,slen):
		out += chr((xor_key ^ Byte(addr)) & 0xFF)
		addr += 1
	return out

#Passed in ebx
def find_string_length(addr):
	done = False
	string_length = 0
	while not done:
		if GetMnem(addr) == "mov" and GetOpnd(addr,0) == "ebx":
			string_length = GetOperandValue(addr,1)
			#print("HERE")
			done = True
			#continue
		elif GetMnem(addr) == "pop" and GetOpnd(addr,0) == "ebx":
			addr = idc.PrevHead(addr)
			
			while GetMnem(addr) != "push":
				inpop = False
				if GetMnem(addr) == "pop":
					inpop = True
				while inpop:
					addr = idc.PrevHead(addr)
					if GetMnem(addr) == "push":
						inpop = False
				addr = idc.PrevHead(addr)
			string_length = GetOperandValue(addr, 0)
			done = True
			#break
		else:
			addr = idc.PrevHead(addr)
	return(string_length)

#Passed on stack
def find_xor_key(addr):
	done = False
	xor_key = 0
	while not done:
		if GetMnem(addr) == "pop":
			while True:
				addr = idc.PrevHead(addr)
				if GetMnem(addr) == "push":
					#print(GetMnem(addr))
					addr = idc.PrevHead(addr)
					break
		if GetMnem(addr) == "push":
			xor_key = GetOperandValue(addr,0)
			done = True
		addr = idc.PrevHead(addr)
	return(xor_key)
#Add address of string decoding function here
for addr in XrefsTo(0x403A4d, flags=0):
	addr = addr.frm
	print(hex(addr)),
	addr = idc.PrevHead(addr)
	"""
	if GetMnem(addr) == "mov" and GetOpnd(addr,0) == "edx":
		string_addr = GetOperandValue(addr, 1)
		addr = idc.PrevHead(addr)
		string_length = 0
		for i in range(0,5):
			if GetMnem(addr) == "mov" and GetOpnd(addr,0) == "ebx":
				string_length = GetOperandValue(addr, 1)
				break
			elif GetMnem(addr) == "pop" and GetOpnd(addr,0) == "ebx":
				addr = idc.PrevHead(addr)
				while GetMnem(addr) != "push":
					addr = idc.PrevHead(addr)
				string_length = GetOperandValue(addr, 0)
				break
			addr = idc.PrevHead(addr)
		#string_length = GetOperandValue(addr,0)
		if string_length == 0:
			print("UNKNOWN")
		addr = idc.PrevHead(addr)
		while GetMnem(addr) != "push":
			addr = idc.PrevHead(addr)
		xor_key = GetOperandValue(addr,0)
		"""
	if GetMnem(addr) == "mov" and GetOpnd(addr,0) == "edx":
		string_addr = GetOperandValue(addr, 1)
		addr = idc.PrevHead(addr)
		string_length = find_string_length(addr)
		#print(string_length)
		xor_key = find_xor_key(addr)
		#print(xor_key)
		print(decode_string(string_addr,string_length,xor_key))
	else:
		print("UNKNOWN")

	